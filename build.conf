# shellcheck shell=bash disable=SC2034

SOURCE_REPO='moonbuggy2000/debian-slim-s6'
USQL_REPO='moonbuggy2000/usql-static'

INCLUDED_ARCHES='amd64'

CACHE_EXPIRY=86400

declare -A BUILD_ARGS=(
	[OXPKI_VERSION]='OXPKI version' \
	[OXPKI_CONFIG_VERSION]='OXPKI config' \
	[USQL_VERSION]='usql version' \
)

declare -A CHECKOUT_DISPLAY=(
	[OXPKI_LATEST]='OXPKI latest' \
	[OXPKI_VERSION]='OXPKI version' \
	[OXPKI_CONFIG_VERSION]='OXPKI config' \
	[OXPKI_VERSIONS_AVAILABLE]='OXPKI available' \
	[USQL_VERSION]='usql version' \
)

case ${DOCKER_TAG} in
	*alpine*)
		SOURCE_REPO='moonbuggy2000/alpine-s6'
		DOCKER_FILE='Dockerfile.alpine'
		TAG_EXTRA='-alpine'
		;;
esac

post_checkout_start () {
	# This doesn't accurately reflect the versions that are available to apt-get in
	# the Debian builds. Regardless of the files we can see via HTTP, we're probably
	# going to be limited to the latest version by apt-get.
	#
	# find available versions
	[ -z "${OXPKI_VERSIONS_AVAILABLE}" ] \
		&& OXPKI_VERSIONS_AVAILABLE="$(get_url http://packages.openxpki.org/v3/debian/pool/release/o/openxpki-i18n/ | \
			grep -oP '>openxpki-i18n_\K[^_]+' | sort -uVr | xargs)"

	# determine the latest OpenXPKI version
	[ -z "${OXPKI_LATEST}" ] \
		&& add_param "$(echo "${OXPKI_VERSIONS_AVAILABLE}" | xargs -n1 2>/dev/null | head -n1)" 'OXPKI_LATEST'

	# determine the latest OpenXPKI config version
	[ -z "${OPKI_CONFIG_LATEST}" ] \
		&& add_param "$(git_api_element openxpki/openxpki-config 'tags' 'name' | sort -uVr | head -n1)" 'OXPKI_CONFIG_VERSION'

	# Because apt-get limits us, to use this code we'd need to be downloading the
	# *.deb file and installing locally with dpkg. But we'll use this mechanism if
	# future images build from source, so keep it for now.
	#
	# # default to the latest OpenXPKI version
	# OXPKI_VERSION="${OXPKI_LATEST}"
	# # but use a specific version if specified
	# local tag_version
	# tag_version="$(echo "${DOCKER_TAG}" | sed -En 's|^v?([0-9\.]*).*|\1|p')"
	# if [ -n "${tag_version}" ]; then
	# 	local matched_version
	# 	matched_version="$(echo "${OXPKI_VERSIONS_AVAILABLE}" | xargs -n1 2>/dev/null | grep -m 1 "${tag_version}")" \
	# 		&& OXPKI_VERSION="${matched_version}" \
	# 		|| { printf 'ERROR: Invalid version: %s\nAvailable versions: %s\nExiting.\n\n' "${tag_version}" "${OXPKI_VERSIONS_AVAILABLE}"; exit 1; }
	# fi
	# add_param "${OXPKI_VERSION}" 'OXPKI_VERSION'

	add_param "${OXPKI_LATEST}" 'OXPKI_VERSION'

	## determine debian version
	[ -z "${DEBIAN_LATEST+set}" ] \
		&& add_param "$(docker_api_latest "${SOURCE_REPO}")" 'DEBIAN_LATEST'

	[ -z "${USQL_VERSION+set}" ] \
		&& add_param "$(docker_api_latest "${USQL_REPO}")" 'USQL_VERSION'

	SOURCE_TAG="${DEBIAN_LATEST}"
}

get_target_tag () { echo "${OXPKI_VERSION%-*}${TAG_EXTRA}"; }

get_base_tags () {
	[ "${TARGET_TAG}" = "${OXPKI_LATEST%-*}" ] \
		&& echo "${TARGET_TAG%.*}"
}

## return extra tags to add during post_push
get_manifest_tags () {
  [ "${TARGET_TAG}" = "${OXPKI_LATEST%-*}" ] \
		&& echo "latest ${TARGET_TAG%.*}"
}
