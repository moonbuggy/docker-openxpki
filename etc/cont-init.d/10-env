#! /usr/bin/with-contenv sh
# shellcheck shell=sh

SQLITE_DB="${OXPKI_SQLITE_PATH:-/openxpki/database.sqlite3}"

print_msg () { printf '[%s] %s' "${0##*/}" "${@}"; }
echo_msg () { print_msg "${*}"; echo; }

## display_env <var> <displayed value>
display_env () { printf '%s %-20s %s\n' "[${0##*/}]" "${1}" "${2}"; }

## declare_env <var> <value> [<displayed value>]
declare_env () {
	key="${1}"
	val="${2:-\$${key}}"

	printf '%s' "${val}" > "/var/run/s6/container_environment/${key}"
	display_env "${key}" "${3:-${val}}"
}

# check we have all the parameters we need to connect to a database
# TYPE has to be done first because it's used in generating other parameters
DB_YAML="/etc/openxpki/config.d/system/database.yaml"
for var_name in TYPE HOST PORT NAME USER PASS ROOT_USER ROOT_PASS SSLMODE; do
	var="OXPKI_DB_${var_name}"
	value="$(eval echo \"\$${var}\")"
	var_display="${value}"

# echo
# echo "doubledollar var: \$${var}"
# echo "value: ${value}"
# echo "eval: $(eval echo \"\$${var}\")"


	# if nothing from env, check database.yaml
	if [ -z "${value}" ] && [ -f "${DB_YAML}" ]; then
		value="$(grep -ioP "${var_name}:\s+\K.*" "${DB_YAML}")"
		[ -n "${value}" ] && var_display="${value} (from database.yaml)"
	fi

	# if nothing from database.yaml either, stop
	[ -z "${value}" ] \
		&& display_env "${var}" '*** not found ***' \
		&& continue

	# generate type strings needed for different software
	if [ "${var_name}" = "TYPE" ]; then
		case $(echo "${value}" | tr '[:upper:]' '[:lower:]') in
			maria*)
				value="MariaDB"
				OXPKI_SCHEMA_FILE='mariadb'
				USQL_SCHEME='mysql'
				;;
			mysql)
				value="MySQL"
				OXPKI_SCHEMA_FILE='mysql'
				USQL_SCHEME='mysql'
				;;
			pg|psql|pgsql|postgres*)
				value="PostgreSQL"
				USQL_SCHEME='postgres'
				OXPKI_SCHEMA_FILE='psql'
				;;
			*)
				USQL_SCHEME='*** unknown ***'
				OXPKI_SCHEMA_FILE='*** unknown ***'
				;;
		esac

		# used in the usql command
		declare_env 'USQL_SCHEME' "${USQL_SCHEME}"

		# used in 20-sql to setup tables:
		#		/etc/openxpki/contrib/sql/schema-${OXPKI_SCHEMA_FILE}.sql
		declare_env 'OXPKI_SCHEMA_FILE' "${OXPKI_SCHEMA_FILE}"
	fi

	# hide passwords from log
	[ "${var_name#*PASS}" != "${var_name}" ] && var_display='[hidden]'

	# make sure downstream cont-init.d will see variables added from database.yaml
	declare_env "${var}" "${value}" "${var_display}"
done
